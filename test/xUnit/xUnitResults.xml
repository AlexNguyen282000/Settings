<?xml version="1.0" encoding="utf-8"?>
<assemblies timestamp="08/12/2019 09:23:11">
  <assembly name="D:\PowerShell\test\xUnit\bin\Release\netcoreapp3.0\powershell-tests.dll" run-date="2019-08-12" run-time="09:23:11" total="65" passed="65" failed="0" skipped="0" time="1.283" errors="0">
    <errors />
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for PSTests.Parallel.FileSystemProviderTests" time="0.199">
      <test name="PSTests.Parallel.FileSystemProviderTests.TestGetContentWriter" type="PSTests.Parallel.FileSystemProviderTests" method="TestGetContentWriter" time="0.0345873" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestClearProperty" type="PSTests.Parallel.FileSystemProviderTests" method="TestClearProperty" time="0.0264270" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestGetContentReader" type="PSTests.Parallel.FileSystemProviderTests" method="TestGetContentReader" time="0.0466087" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestClearContent" type="PSTests.Parallel.FileSystemProviderTests" method="TestClearContent" time="0.0236387" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestSetProperty" type="PSTests.Parallel.FileSystemProviderTests" method="TestSetProperty" time="0.0200957" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestMode" type="PSTests.Parallel.FileSystemProviderTests" method="TestMode" time="0.0050161" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestGetHelpMaml" type="PSTests.Parallel.FileSystemProviderTests" method="TestGetHelpMaml" time="0.0048890" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestGetProperty" type="PSTests.Parallel.FileSystemProviderTests" method="TestGetProperty" time="0.0348815" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.FileSystemProviderTests.TestCreateJunctionFails" type="PSTests.Parallel.FileSystemProviderTests" method="TestCreateJunctionFails" time="0.0027927" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for PSTests.Parallel.MshSnapinInfoTests" time="0.000">
      <test name="PSTests.Parallel.MshSnapinInfoTests.TestReadCoreEngineSnapIn" type="PSTests.Parallel.MshSnapinInfoTests" method="TestReadCoreEngineSnapIn" time="0.0002318" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.MshSnapinInfoTests.TestReadRegistryInfo" type="PSTests.Parallel.MshSnapinInfoTests" method="TestReadRegistryInfo" time="0.0000870" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="2" passed="2" failed="0" skipped="0" name="Test collection for PSTests.Parallel.NamedPipeTests" time="0.002">
      <test name="PSTests.Parallel.NamedPipeTests.TestCustomPipeNameCreation" type="PSTests.Parallel.NamedPipeTests" method="TestCustomPipeNameCreation" time="0.0015308" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.NamedPipeTests.TestCustomPipeNameCreationTooLongOnNonWindows" type="PSTests.Parallel.NamedPipeTests" method="TestCustomPipeNameCreationTooLongOnNonWindows" time="0.0005169" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Parallel.PlatformTests" time="0.000">
      <test name="PSTests.Parallel.PlatformTests.TestIsCoreCLR" type="PSTests.Parallel.PlatformTests" method="TestIsCoreCLR" time="0.0000435" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Parallel.PSEnumerableBinderTests" time="0.000">
      <test name="PSTests.Parallel.PSEnumerableBinderTests.TestIsStaticTypePossiblyEnumerable" type="PSTests.Parallel.PSEnumerableBinderTests" method="TestIsStaticTypePossiblyEnumerable" time="0.0003007" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for PSTests.Parallel.PSObjectTests" time="0.118">
      <test name="PSTests.Parallel.PSObjectTests.TestShadowedMember" type="PSTests.Parallel.PSObjectTests" method="TestShadowedMember" time="0.0024421" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestCimInstanceProperty" type="PSTests.Parallel.PSObjectTests" method="TestCimInstanceProperty" time="0.1108234" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestAdaptedMember" type="PSTests.Parallel.PSObjectTests" method="TestAdaptedMember" time="0.0002742" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestMemberSet" type="PSTests.Parallel.PSObjectTests" method="TestMemberSet" time="0.0002740" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TextXmlElementMember" type="PSTests.Parallel.PSObjectTests" method="TextXmlElementMember" time="0.0009978" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestEmptyObjectHasNoProperty" type="PSTests.Parallel.PSObjectTests" method="TestEmptyObjectHasNoProperty" time="0.0026426" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestWrappedDateTimeHasReflectedMember" type="PSTests.Parallel.PSObjectTests" method="TestWrappedDateTimeHasReflectedMember" time="0.0002328" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TextXmlAttributeMember" type="PSTests.Parallel.PSObjectTests" method="TextXmlAttributeMember" time="0.0002525" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.PSObjectTests.TestMemberSetIsNotProperty" type="PSTests.Parallel.PSObjectTests" method="TestMemberSetIsNotProperty" time="0.0002087" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Parallel.PSTypeExtensionsTests" time="0.000">
      <test name="PSTests.Parallel.PSTypeExtensionsTests.TestIsNumeric" type="PSTests.Parallel.PSTypeExtensionsTests" method="TestIsNumeric" time="0.0000654" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Parallel.PSVersionInfoTests" time="0.000">
      <test name="PSTests.Parallel.PSVersionInfoTests.TestVersions" type="PSTests.Parallel.PSVersionInfoTests" method="TestVersions" time="0.0000562" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for PSTests.Parallel.SecuritySupportTests" time="0.035">
      <test name="PSTests.Parallel.SecuritySupportTests.TestUninitialize" type="PSTests.Parallel.SecuritySupportTests" method="TestUninitialize" time="0.0000531" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.SecuritySupportTests.TestScanContent" type="PSTests.Parallel.SecuritySupportTests" method="TestScanContent" time="0.0049049" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.SecuritySupportTests.TestCloseSession" type="PSTests.Parallel.SecuritySupportTests" method="TestCloseSession" time="0.0297840" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Parallel.SessionStateTests" time="0.028">
      <test name="PSTests.Parallel.SessionStateTests.TestDrives" type="PSTests.Parallel.SessionStateTests" method="TestDrives" time="0.0279970" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for PSTests.Parallel.UtilsTests" time="0.011">
      <test name="PSTests.Parallel.UtilsTests.TestConvertToJsonWithEnum" type="PSTests.Parallel.UtilsTests" method="TestConvertToJsonWithEnum" time="0.0037060" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestConvertToJsonBasic" type="PSTests.Parallel.UtilsTests" method="TestConvertToJsonBasic" time="0.0044281" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestConvertToJsonWithoutCompress" type="PSTests.Parallel.UtilsTests" method="TestConvertToJsonWithoutCompress" time="0.0001432" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestBoundedStack" type="PSTests.Parallel.UtilsTests" method="TestBoundedStack" time="0.0012620" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestConvertToJsonCancellation" type="PSTests.Parallel.UtilsTests" method="TestConvertToJsonCancellation" time="0.0002109" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestHistoryStack" type="PSTests.Parallel.UtilsTests" method="TestHistoryStack" time="0.0006679" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.UtilsTests.TestIsWinPEHost" type="PSTests.Parallel.UtilsTests" method="TestIsWinPEHost" time="0.0001038" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="13" passed="13" failed="0" skipped="0" name="Test collection for PSTests.Parallel.WildcardPatternTests" time="0.004">
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String(source: &quot;a*&quot;, expected: &quot;a`*&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String" time="0.0014011" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String(source: &quot;a&quot;, expected: &quot;a&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String" time="0.0000128" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String(source: &quot;*?[]&quot;, expected: &quot;`*`?`[`]&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String" time="0.0000134" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String_NotEscape(source: &quot;*?[]&quot;, expected: &quot;*?[]&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String_NotEscape" time="0.0000703" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String_NotEscape(source: &quot;a&quot;, expected: &quot;a&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String_NotEscape" time="0.0000044" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_String_NotEscape(source: &quot;a*&quot;, expected: &quot;a*&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_String_NotEscape" time="0.0000031" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestUnescape_String(source: &quot;a&quot;, expected: &quot;a&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestUnescape_String" time="0.0011643" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestUnescape_String(source: &quot;a`*&quot;, expected: &quot;a*&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestUnescape_String" time="0.0000082" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestUnescape_String(source: &quot;`*`?`[`]&quot;, expected: &quot;*?[]&quot;)" type="PSTests.Parallel.WildcardPatternTests" method="TestUnescape_String" time="0.0000055" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestUnescape_Empty" type="PSTests.Parallel.WildcardPatternTests" method="TestUnescape_Empty" time="0.0000523" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_Empty" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_Empty" time="0.0000433" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestUnescape_Null" type="PSTests.Parallel.WildcardPatternTests" method="TestUnescape_Null" time="0.0008087" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Parallel.WildcardPatternTests.TestEscape_Null" type="PSTests.Parallel.WildcardPatternTests" method="TestEscape_Null" time="0.0001769" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for PSTests.Sequential.PowerShellHostingScenario" time="0.555">
      <test name="PSTests.Sequential.PowerShellHostingScenario.TestStartJobThrowTerminatingException" type="PSTests.Sequential.PowerShellHostingScenario" method="TestStartJobThrowTerminatingException" time="0.5546889" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="10" passed="10" failed="0" skipped="0" name="Test collection for PSTests.Sequential.PowerShellPolicyTests" time="0.107">
      <test name="PSTests.Sequential.PowerShellPolicyTests.Utils_GetPolicySetting_BothConfigFilesNotEmpty" type="PSTests.Sequential.PowerShellPolicyTests" method="Utils_GetPolicySetting_BothConfigFilesNotEmpty" time="0.0431987" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.PowerShellConfig_GetPowerShellPolicies_BothConfigFilesEmpty" type="PSTests.Sequential.PowerShellPolicyTests" method="PowerShellConfig_GetPowerShellPolicies_BothConfigFilesEmpty" time="0.0015051" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.Utils_GetPolicySetting_EmptySystemConfig" type="PSTests.Sequential.PowerShellPolicyTests" method="Utils_GetPolicySetting_EmptySystemConfig" time="0.0089637" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.Utils_GetPolicySetting_BothConfigFilesEmpty" type="PSTests.Sequential.PowerShellPolicyTests" method="Utils_GetPolicySetting_BothConfigFilesEmpty" time="0.0063673" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.PowerShellConfig_GetPowerShellPolicies_EmptySystemConfig" type="PSTests.Sequential.PowerShellPolicyTests" method="PowerShellConfig_GetPowerShellPolicies_EmptySystemConfig" time="0.0030972" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.Utils_GetPolicySetting_BothConfigFilesNotExist" type="PSTests.Sequential.PowerShellPolicyTests" method="Utils_GetPolicySetting_BothConfigFilesNotExist" time="0.0018622" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.PowerShellConfig_GetPowerShellPolicies_BothConfigFilesNotEmpty" type="PSTests.Sequential.PowerShellPolicyTests" method="PowerShellConfig_GetPowerShellPolicies_BothConfigFilesNotEmpty" time="0.0047810" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.PowerShellConfig_GetPowerShellPolicies_EmptyUserConfig" type="PSTests.Sequential.PowerShellPolicyTests" method="PowerShellConfig_GetPowerShellPolicies_EmptyUserConfig" time="0.0029701" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.Utils_GetPolicySetting_EmptyUserConfig" type="PSTests.Sequential.PowerShellPolicyTests" method="Utils_GetPolicySetting_EmptyUserConfig" time="0.0332948" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.PowerShellPolicyTests.PowerShellConfig_GetPowerShellPolicies_BothConfigFilesNotExist" type="PSTests.Sequential.PowerShellPolicyTests" method="PowerShellConfig_GetPowerShellPolicies_BothConfigFilesNotExist" time="0.0005880" result="Pass">
        <traits />
      </test>
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for PSTests.Sequential.RunspaceTests" time="0.224">
      <test name="PSTests.Sequential.RunspaceTests.TestRunspaceSetBreakpoints" type="PSTests.Sequential.RunspaceTests" method="TestRunspaceSetBreakpoints" time="0.0239401" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.RunspaceTests.TestRunspaceWithPowerShellAndInitialSessionState" type="PSTests.Sequential.RunspaceTests" method="TestRunspaceWithPowerShellAndInitialSessionState" time="0.1597851" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.RunspaceTests.TestRunspaceWithPipeline" type="PSTests.Sequential.RunspaceTests" method="TestRunspaceWithPipeline" time="0.0201638" result="Pass">
        <traits />
      </test>
      <test name="PSTests.Sequential.RunspaceTests.TestRunspaceWithPowerShell" type="PSTests.Sequential.RunspaceTests" method="TestRunspaceWithPowerShell" time="0.0205090" result="Pass">
        <traits />
      </test>
    </collection>
  </assembly>
</assemblies>