Describe 'Tests for mac line endings' -Tags "CI" {# This file has mac line endings.  Do not change the line endings.# Due to a bug in pester to Remove-Comments, comments cannot be in It body in this file    BeforeAll {        $crByte = [byte][char]"`r"        $nlByte = [byte][char]"`n"        # First, make sure this file only has mac line endings (in case someone        # edits the file and messes that up.        #$newlines = [IO.File]::ReadAllBytes((resolve-path $myInvocation.InvocationName)) | ? { $_ -eq $nlByte }        #$newlines | Should Be $null    }    Context 'Single quotes here-string' {        $strBytes = [byte[]][char[]] @'        This        is        a        multi        line        string'@        It 'crByte count' { ($strBytes | ? { $_ -eq $crByte } | measure-object).Count | Should Be 5 }        It 'nlByte count' { ($strBytes | ? { $_ -eq $nlByte } | measure-object).Count | Should Be 0 }    }    Context 'Double quotes here string' {        $strBytes = [byte[]][char[]] @"        This        is        a        multi        line        string"@    It 'crByte count' { ($strBytes | ? { $_ -eq $crByte } | measure-object).Count | Should Be 5 }    It 'nlByte count' { ($strBytes | ? { $_ -eq $nlByte } | measure-object).Count | Should Be 0 }}    Context 'single quotes string' {        $strBytes = [byte[]][char[]] 'This        is        a        multi        line        string'        It 'crByte count' { ($strBytes | ? { $_ -eq $crByte } | measure-object).Count | Should Be 5}        It 'nlByte count' { ($strBytes | ? { $_ -eq $nlByte } | measure-object).Count | Should Be 0}    }    Context 'double quotes string' {        $strBytes = [byte[]][char[]] "This        is        a        multi        line        string"        It 'crByte count' { ($strBytes | ? { $_ -eq $crByte } | measure-object).Count | Should Be 5 }        It 'nlByte count' { ($strBytes | ? { $_ -eq $nlByte } | measure-object).Count | Should Be 0 }    }}