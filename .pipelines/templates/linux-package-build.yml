parameters:
  sourceDrop: 'drop_linux_sign_linux_x64'
  packageType: deb

jobs:
- job: package_linux_${{ parameters.buildArchitecture }}
  displayName: Package macOS ${{ parameters.buildArchitecture }}
  condition: succeeded()
  pool:
    type: linux

  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: nugetMultiFeedWarnLevel
      value: none
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - name: skipNugetSecurityAnalysis
      value: true
    - group: DotNetPrivateBuildAccess
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
    - name: ob_sdl_binskim_enabled
      value: true
    - name: PackageType
      value: ${{ parameters.packageType }}
    - name: SourceDrop
      value: ${{ parameters.sourceDrop }}
    - name: ob_sdl_tsa_configFile
      value: $(Build.SourcesDirectory)/PowerShell/.config/tsaoptions.json
    - name: ob_sdl_credscan_suppressionsFile
      value: $(Build.SourcesDirectory)/PowerShell/.config/suppress.json

  steps:
  - checkout: self
    clean: true

  - pwsh: |
      Get-ChildItem -Path env:
    displayName: Capture environment

  - pwsh: |
      # create folder
      sudo mkdir "$(Agent.TempDirectory)/PowerShell"

      # make the current user the owner
      sudo chown $env:USER "$(Agent.TempDirectory)/PowerShell"
    displayName: 'Create $(Agent.TempDirectory)/PowerShell'

  - template: SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)
      CreateJson: yes
      UseJson: no

  - template: shouldSign.yml

  - template: cloneToOfficialPath.yml
    parameters:
      nativePathRoot: '$(Agent.TempDirectory)'

  - download: CoOrdinatedBuildPipeline
    artifact: ${{ parameters.sourceDrop }}

  - pwsh: |
      Write-Verbose -Verbose "Downloaded artifacts"
      Get-ChildItem "$(Pipeline.Workspace)/CoOrdinatedBuildPipeline/${{ parameters.sourceDrop }}" -Recurse
    displayName: 'Capture Downloaded Artifacts'
    # Diagnostics is not critical it passes every time it runs
    continueOnError: true

  - pwsh: |
      $packageType = '$(PackageType)'
      Write-Verbose -Verbose "packageType = $packageType"

      $sourceDrop = '$(SourceDrop)'
      Write-Verbose -Verbose "sourceDrop = $sourceDrop"

      Write-Verbose -Message "Init..." -Verbose

      $repoRoot = "$env:REPOROOT/PowerShell"
      Set-Location $repoRoot
      Import-Module "$repoRoot/build.psm1"
      Import-Module "$repoRoot/tools/packaging"

      Start-PSBootstrap -Package

      $signedFilesPath = "$(Pipeline.Workspace)/CoOrdinatedBuildPipeline/drop_windows_build_windows_${runtime}_release/$signedFolder"
      Write-Verbose -Verbose "signedFilesPath: $signedFilesPath"

      $psoptionsFilePath = "$(Pipeline.Workspace)/CoOrdinatedBuildPipeline/drop_windows_build_windows_${runtime}_release/psoptions/psoptions.json"
      Write-Verbose -Verbose "psoptionsFilePath: $psoptionsFilePath"

      Write-Verbose -Message "checking pwsh exists in $signedFilesPath" -Verbose
      if (-not (Test-Path $signedFilesPath/pwsh)) {
        throw "pwsh not found in $signedFilesPath"
      }

      Write-Verbose -Message "Restoring PSOptions from $psoptionsFilePath" -Verbose

      Restore-PSOptions -PSOptionsPath "$psoptionsFilePath"
      Get-PSOptions | Write-Verbose -Verbose

      $metadata = Get-Content "$repoRoot/tools/metadata.json" -Raw | ConvertFrom-Json
      $LTS = $metadata.LTSRelease.Package

      if ($LTS) {
        Write-Verbose -Message "LTS Release: $LTS"
      }

      Start-PSBootstrap -Package

      $WindowsRuntime = switch ($runtime) {
        'x64' { 'win7-x64' }
        'x86' { 'win7-x86' }
        'arm64' { 'win-arm64' }
        'fxdependent' { 'win7-x64' }
        'fxdependentWinDesktop' { 'win7-x64' }
      }

      ## msi disabled till Wix can be installed
      $packageTypes = switch ($runtime) {
        'x64' { @('msi', 'zip', 'msix') }
        'x86' { @('msi', 'zip', 'msix') }
        'arm64' { @('msi', 'zip', 'msix') }
        'fxdependent' { 'fxdependent' }
        'fxdependentWinDesktop' { 'fxdependent-win-desktop' }
      }

      if (-not (Test-Path $(ob_outputDirectory))) {
        New-Item -ItemType Directory -Path $(ob_outputDirectory) -Force
      }

      Start-PSPackage -Type $packageTypes -SkipReleaseChecks -WindowsRuntime $WindowsRuntime -ReleaseTag $(ReleaseTagVar) -PackageBinPath $signedFilesPath

      if ($packageTypes -contains 'msi') {
        $msiPkgNameFilter = "powershell-*.msi"
        $msiPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $msiPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "msiPkgPath: $msiPkgPath"
        Copy-Item -Path $msiPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

      if ($packageTypes -contains 'zip') {
        $zipPkgNameFilter = "powershell-*.zip"
        $zipPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $zipPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "zipPkgPath: $zipPkgPath"
        Copy-Item -Path $zipPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

      if ($packageTypes -contains 'msix') {
        $msixPkgNameFilter = "powershell-*.msix"
        $msixPkgPath = Get-ChildItem -Path $(Pipeline.Workspace) -Filter $msixPkgNameFilter -Recurse -File | Select-Object -ExpandProperty FullName
        Write-Verbose -Verbose "msixPkgPath: $msixPkgPath"
        Copy-Item -Path $msixPkgPath -Destination '$(ob_outputDirectory)' -Force -Verbose
      }

    displayName: 'Package ${{ parameters.buildArchitecture}}'
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

  - template: /tools/releaseBuild/azureDevOps/templates/step/finalize.yml
