parameters:
  parentJob: ''
  buildArchitecture: x64

jobs:
- job: package_macOS_${{ parameters.buildArchitecture }}
  displayName: Package macOS ${{ parameters.buildArchitecture }}
  condition: succeeded()
  pool:
    type: linux
    isCustom: true
    name: Azure Pipelines
    vmImage: 'macOS-latest'

  variables:
    - name: HOMEBREW_NO_ANALYTICS
      value: 1
    - name: runCodesignValidationInjection
      value: false
    - name: nugetMultiFeedWarnLevel
      value: none
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - name: skipNugetSecurityAnalysis
      value: true
    - group: DotNetPrivateBuildAccess
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
    - name: ob_sdl_binskim_enabled
      value: true
    - name: ob_sdl_credscan_suppressionsfileforartifacts
      value: $(Build.SourcesDirectory)/PowerShell/.config/suppress.json
    - name: BuildArch
      value: ${{ parameters.buildArchitecture }}

  steps:
  - checkout: self
    clean: true

  - pwsh: |
      Get-ChildItem -Path env:
    displayName: Capture environment

  - pwsh: |
      # create folder
      sudo mkdir "$(Agent.TempDirectory)/PowerShell"

      # make the current user the owner
      sudo chown $env:USER "$(Agent.TempDirectory)/PowerShell"
    displayName: 'Create $(Agent.TempDirectory)/PowerShell'

  - template: SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)
      CreateJson: yes
      UseJson: no

  - template: shouldSign.yml

  - template: cloneToOfficialPath.yml
    parameters:
      nativePathRoot: '$(Agent.TempDirectory)'

  - download: CoOrdinatedBuildPipeline
    artifact: macosBinResults-${{ parameters.buildArchitecture }}

  - download: CoOrdinatedBuildPipeline
    artifact: drop_macos_sign_${{ parameters.buildArchitecture }}

  # - task: DownloadPipelineArtifact@2
  #   displayName: Download macosBinResults
  #   inputs:
  #     artifactName: 'macosBinResults'
  #     itemPattern: '**/*$(BuildArch).zip'
  #     downloadPath: '$(System.ArtifactsDirectory)/Symbols'

  # - task: DownloadBuildArtifacts@0
  #   displayName: Download signedMacOsBins
  #   inputs:
  #     artifactName: 'signedMacOsBins_${{ parameters.buildArchitecture }}'
  #     itemPattern: '**/*'
  #     downloadPath: '$(System.ArtifactsDirectory)/macOsBins'
  #   condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'true'))

  - pwsh: |
      Get-ChildItem "$(Pipeline.Workspace)/CoOrdinatedBuildPipeline/macosBinResults" -Recurse
    displayName: 'Capture Downloaded Artifacts'
    # Diagnostics is not critical it passes every time it runs
    continueOnError: true

  - pwsh: |

      $expandedFolder = $zipPath.BaseName
      Write-Host "sending.. vso[task.setvariable variable=SymbolsFolder]$expandedFolder"
      Write-Host "##vso[task.setvariable variable=SymbolsFolder]$expandedFolder"

      Expand-Archive -Path $zipPath -Destination "$(System.ArtifactsDirectory)\$expandedFolder" -Force
    displayName: Expand symbols zip

  # - pwsh: |
  #     Import-Module $(PowerShellRoot)/build.psm1 -Force
  #     Import-Module $(PowerShellRoot)/tools/packaging -Force
  #     $signedFilesPath = '$(System.ArtifactsDirectory)/macOsBins/signedMacOsBins_${{ parameters.buildArchitecture }}/'
  #     $BuildPath = '$(System.ArtifactsDirectory)\$(SymbolsFolder)'

  #     Update-PSSignedBuildFolder -BuildPath $BuildPath -SignedFilesPath $SignedFilesPath
  #   displayName: Merge signed files with Build
  #   condition: and(succeeded(), eq(variables['SHOULD_SIGN'], 'true'))

  # - pwsh: |
  #     Import-Module $(PowerShellRoot)/build.psm1 -Force
  #     Import-Module $(PowerShellRoot)/tools/packaging -Force

  #     $destFolder = '$(System.ArtifactsDirectory)\signedZip'
  #     $BuildPath = '$(System.ArtifactsDirectory)\$(SymbolsFolder)'

  #     $null = New-Item -ItemType Directory -Path $destFolder -Force

  #     $BuildPackagePath = New-PSBuildZip -BuildPath $BuildPath -DestinationFolder $destFolder

  #     Write-Verbose -Verbose "New-PSSignedBuildZip returned `$BuildPackagePath as: $BuildPackagePath"
  #     Write-Host "##vso[artifact.upload containerfolder=results;artifactname=results]$BuildPackagePath"

  #     $vstsCommandString = "vso[task.setvariable variable=BuildPackagePath]$BuildPackagePath"
  #     Write-Host ("sending " + $vstsCommandString)
  #     Write-Host "##$vstsCommandString"
  #   displayName: Compress signed files
  #   retryCountOnTaskFailure: 2


  # - pwsh: |
  #     try {
  #       tools/releaseBuild/macOS/pPowerShellPackageVsts.ps1 -location $(PowerShellRoot) -BootStrap
  #     } catch {
  #       Get-Error
  #       throw
  #     }
  #   displayName: 'Bootstrap VM'
  #   env:
  #     __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

  - pwsh: |
      # Add -SkipReleaseChecks as a mitigation to unblock release.
      # macos-10.15 does not allow creating a folder under root. Hence, moving the folder.

      Write-Verbose -Message "Init..." -Verbose
      $repoRoot = $env:REPOROOT
      Set-Location $repoRoot
      Import-Module "$repoRoot/build.psm1"
      Import-Module "$repoRoot/tools/packaging"

      $unsignedFilesPath = '$(System.ArtifactsDirectory)/macosBinResults-${{ parameters.buildArchitecture }}/'
      $signedFilesPath = '$(System.ArtifactsDirectory)/drop_macos_sign_${{ parameters.buildArchitecture }}/'

      $psoptionsPath = '$unsignedFilesPath/psoptions.json'
      Write-Verbose -Message "Restoring PSOptions from $psoptionsPath" -Verbose

      Restore-PSOptions -PSOptionsPath "$psoptionsPath"
      Get-PSOptions | Write-Verbose -Verbose

      $metadata = Get-Content "$repoRoot/tools/metadata.json" -Raw | ConvertFrom-Json
      $LTS = $metadata.LTSRelease.Package

      if ($LTS) {
        Write-Verbose -Message "LTS Release: $LTS"
      }

      Start-PSBootstrap -Package

      Start-PSPackage -SkipReleaseChecks -MacOSRuntime 'osx-x64' -ReleaseTag $(ReleaseTagVar)
      Start-PSPackage -Type tar -SkipReleaseChecks -MacOSRuntime 'osx-x64' -ReleaseTag $(ReleaseTagVar)
    displayName: 'Package osx-x64'
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)


  # - pwsh: |
  #     # Add -SkipReleaseChecks as a mitigation to unblock release.
  #     # macos-10.15 does not allow creating a folder under root. Hence, moving the folder.
  #     try {
  #       $(Build.SourcesDirectory)/tools/releaseBuild/macOS/PowerShellPackageVsts.ps1 -ReleaseTag $(ReleaseTagVar) -Destination $(System.ArtifactsDirectory) -location $(PowerShellRoot) -ArtifactName macosPkgResults -BuildZip $(BuildPackagePath) -ExtraPackage "tar" -Runtime 'osx-${{ parameters.buildArchitecture }}' -SkipReleaseChecks
  #     } catch {
  #       Get-Error
  #       throw
  #     }
  #   displayName: 'Package'
  #   env:
  #     __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)

  - template: /tools/releaseBuild/azureDevOps/templates/step/finalize.yml
