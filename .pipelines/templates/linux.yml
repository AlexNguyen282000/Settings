# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
parameters:
  buildName: ''
  uploadDisplayName: 'Upload'
  parentJob: ''
jobs:
- job: build_${{ parameters.buildName }}
  displayName: Build ${{ parameters.buildName }}
  condition: succeeded()
  pool:
    type: linux
  dependsOn: ${{ parameters.parentJob }}
  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: build
      value: ${{ parameters.buildName }}
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - group: ESRP
    - group: DotNetPrivateBuildAccess
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
    - name: ob_sdl_tsa_configFile
      value: $(Build.SourcesDirectory)\PowerShell\.pipelines\tsaoptions.json
    - name: ob_sdl_binskim_enabled
      value: true
  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - checkout: ComplianceRepo
    clean: true
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - template: /.pipelines/templates/SetVersionVariables.yml@self
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - pwsh: |
      # create folder
      sudo mkdir /PowerShell
      # make the current user the owner
      $userName = whoami
      Write-Verbose -Verbose "Current user: $userName"
      sudo chown $userName /PowerShell
    displayName: 'Create /PowerShell'
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - template: /.pipelines/templates/cloneToOfficialPath.yml@self

  - template: /.pipelines/templates/insert-nuget-config-azfeed.yml@self
    parameters:
      repoRoot: $(PowerShellRoot)

  - powershell: |
      import-module "$env:POWERSHELLROOT/build.psm1"
      Sync-PSTags -AddRemoteIfMissing
    displayName: SyncTags
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)
    env:
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - powershell: |
      Import-Module "$env:POWERSHELLROOT/build.psm1"
      Start-PSBootstrap -Package
    displayName: 'Bootstrap'
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)
    env:
      __DOTNET_RUNTIME_FEED_KEY: $(RUNTIME_SOURCEFEED_KEY)
      ob_restore_phase: true # This ensures checkout is done at the beginning of the restore phase

  - pwsh: |
      try {
        Import-Module "$env:POWERSHELLROOT/build.psm1"
        Import-Module "$env:POWERSHELLROOT/tools/packaging"
        Invoke-AzDevOpsLinuxPackageBuild -ReleaseTag '$(ReleaseTagVar)' -BuildType '$(build)'
        Write-Verbose -Verbose "File permisions after building"
        Get-ChildItem -Path $(System.ArtifactsDirectory)/pwshLinuxBuild/pwsh | Select-Object -Property 'unixmode', 'size', 'name'
      } catch {
        Get-Error
        throw
      }
    displayName: 'Build'
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))
    workingDirectory: $(PowerShellRoot)
  # - template: Sbom.yml@ComplianceRepo
  #   parameters:
  #     BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuild'
  #     Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #     displayName: ${{ parameters.buildName }} SBOM
  #     PackageName: PowerShell Linux
  #     PackageVersion: $(Version)
  #     sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'rpm') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: Mariner x64 SBOM
  #       PackageName: PowerShell Linux Framework Dependent
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'rpm') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: Mariner arm64 SBOM
  #       PackageName: PowerShell Linux Framework Dependent
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'deb') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: MinSize SBOM
  #       PackageName: PowerShell Linux Minimum Size
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'deb') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: Arm32 SBOM
  #       PackageName: PowerShell Linux Arm32
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'deb') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: Arm64 SBOM
  #       PackageName: PowerShell Linux Arm64
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  # - ${{ if eq(variables.build,'alpine') }}:
  #   - template: Sbom.yml@ComplianceRepo
  #     parameters:
  #       BuildDropPath: '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64'
  #       Build_Repository_Uri: $(Github_Build_Repository_Uri)
  #       displayName: Alpine FXD SBOM
  #       PackageName: PowerShell Alpine Framework Dependent AMD64
  #       PackageVersion: $(Version)
  #       sourceScanPath: '$(PowerShellRoot)/tools'
  - pwsh: |
      Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuild' -Verbose
      Write-Verbose -Verbose "File permisions before compressing"
      Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/pwshLinuxBuild/pwsh | Select-Object -Property 'unixmode', 'size', 'name'
      tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz *
    displayName: Compress pwshLinuxBuild
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildMinSize.tar.gz *
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildArm32.tar.gz *
        Set-Location '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64'
        tar -czvf $(System.ArtifactsDirectory)/pwshLinuxBuildArm64.tar.gz *
      displayName: Compress deb
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64'
        tar -czvf $(System.ArtifactsDirectory)/pwshMarinerBuildAmd64.tar.gz *
      displayName: Compress pwshMarinerBuildAmd64
  - ${{ if eq(variables.build,'alpine') }}:
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64'
        tar -czvf $(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64.tar.gz *
      displayName: Compress pwshAlpineFxdBuildAmd64
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        Set-Location '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64'
        tar -czvf $(System.ArtifactsDirectory)/pwshMarinerBuildArm64.tar.gz *
      displayName: Compress pwshMarinerBuildArm64
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz')) {
          throw "pwshLinuxBuild.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuild.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuild.tar.gz' -Verbose
        }
      displayName: Copy pwshLinuxBuild.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta')) {
          throw "pwshLinuxBuild-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuild-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuild-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuild-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuild-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuild-meta' -Recurse -Verbose
        }
      displayName: Copy pwshLinuxBuild-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize.tar.gz')) {
          throw "pwshLinuxBuildMinSize.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuildMinSize.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildMinSize.tar.gz' -Verbose
        }
      displayName: Copy pwshLinuxBuild.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize-meta')) {
          throw "pwshLinuxBuildMinSize-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuildMinSize-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildMinSize-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildMinSize-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildMinSize-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildMinSize-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildMinSize-meta' -Recurse -Verbose
        }
      displayName: Copy pwshLinuxBuild-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32.tar.gz')) {
          throw "pwshLinuxBuildArm32.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuildArm32.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm32.tar.gz' -Verbose
        }
      displayName: Copy pwshLinuxBuildArm32.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32-meta')) {
          throw "pwshLinuxBuildArm32-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuildArm32-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm32-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm32-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm32-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildArm32-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm32-meta' -Recurse -Verbose
        }
      displayName: Copy pwshLinuxBuild-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64.tar.gz')) {
          throw "pwshLinuxBuildArm64.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuildArm64.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm64.tar.gz' -Verbose
        }
      displayName: Copy pwshLinuxBuildArm64.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'deb') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64-meta')) {
          throw "pwshLinuxBuildArm64-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuildArm64-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm64-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm64-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm64-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuildArm64-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildArm64-meta' -Recurse -Verbose
        }
      displayName: Copy pwshLinuxBuildArm64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64.tar.gz')) {
          throw "pwshMarinerBuildAmd64.tar.gz not found"
        }
        else {
          Write-Host "pwshMarinerBuildAmd64.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildAmd64.tar.gz' -Verbose
        }
      displayName: Copy pwshMarinerBuildAmd64.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64-meta')) {
          throw "pwshMarinerBuildAmd64-meta not found"
        }
        else {
          Write-Host "pwshMarinerBuildAmd64-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildAmd64-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildAmd64-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildAmd64-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshMarinerBuildAmd64-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildAmd64-meta' -Recurse -Verbose
        }
      displayName: Copy pwshMarinerBuildAmd64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64.tar.gz')) {
          throw "pwshMarinerBuildArm64.tar.gz not found"
        }
        else {
          Write-Host "pwshMarinerBuildArm64.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildArm64.tar.gz' -Verbose
        }
      displayName: Copy pwshMarinerBuildArm64.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'rpm') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64-meta')) {
          throw "pwshMarinerBuildArm64-meta not found"
        }
        else {
          Write-Host "pwshMarinerBuildArm64-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildArm64-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildArm64-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildArm64-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshMarinerBuildArm64-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshMarinerBuildArm64-meta' -Recurse -Verbose
        }
      displayName: Copy pwshMarinerBuildArm64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'alpine') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz')) {
          throw "pwshLinuxBuild.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuild.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildAlpine.tar.gz' -Verbose
        }
      displayName: Copy pwshLinuxBuild.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'alpine') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta')) {
          throw "pwshLinuxBuild-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuild-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildAlpine-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildAlpine-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildAlpine-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildAlpine-meta' -Recurse -Verbose
        }
      displayName: Copy pwshMarinerBuildArm64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'alpine') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64.tar.gz')) {
          throw "pwshAlpineFxdBuildAmd64.tar.gz not found"
        }
        else {
          Write-Host "pwshAlpineFxdBuildAmd64.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshAlpineFxdBuildAmd64.tar.gz' -Verbose
        }
      displayName: Copy pwshAlpineFxdBuildAmd64.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'alpine') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64-meta')) {
          throw "pwshAlpineFxdBuildAmd64-meta not found"
        }
        else {
          Write-Host "pwshAlpineFxdBuildAmd64-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshAlpineFxdBuildAmd64-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshAlpineFxdBuildAmd64-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshAlpineFxdBuildAmd64-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshAlpineFxdBuildAmd64-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshAlpineFxdBuildAmd64-meta' -Recurse -Verbose
        }
      displayName: Copy pwshAlpineFxdBuildAmd64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'fxdependent') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz')) {
          throw "pwshLinuxBuild.tar.gz not found"
        }
        else {
          Write-Host "pwshLinuxBuild.tar.gz found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild.tar.gz' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildFxdependent.tar.gz' -Verbose
        }
      displayName: Copy pwshAlpineFxdBuildAmd64.tar.gz to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
  - ${{ if eq(variables.build,'fxdependent') }}:
    - pwsh: |
        if (-not (Test-Path '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta')) {
          throw "pwshLinuxBuild-meta not found"
        }
        else {
          Write-Host "pwshLinuxBuild-meta found"

          if (-not (Test-Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildFxdependent-meta')) {
            New-Item -ItemType Directory -Path '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildFxdependent-meta'
          }
          else {
            Write-Host "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildFxdependent-meta already exists"
          }

          Copy-Item '$(System.ArtifactsDirectory)/pwshLinuxBuild-meta' -Destination '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/pwshLinuxBuildFxdependent-meta' -Recurse -Verbose
        }
      displayName: Copy pwshAlpineFxdBuildAmd64-meta to $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
