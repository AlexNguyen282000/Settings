name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
trigger:
  # Batch merge builds together while a merge build is running
  batch: true
  branches:
    include:
    - master
    - release*
    - feature*
  paths:
    include:
    - '*'
    exclude:
    - .vsts-ci/misc-analysis.yml
    - .github/ISSUE_TEMPLATE/*
    - .dependabot/config.yml
    - test/perf/*
pr:
  branches:
    include:
    - master
    - release*
    - feature*
  paths:
    include:
    - '*'
    exclude:
    - .dependabot/config.yml
    - .github/ISSUE_TEMPLATE/*
    - .vsts-ci/misc-analysis.yml
    - .vsts-ci/windows.yml
    - .vsts-ci/windows/*
    - tools/cgmanifest.json
    - LICENSE.txt
    - test/common/markdown/*
    - test/perf/*
    - tools/releaseBuild/*
    - tools/releaseBuild/azureDevOps/templates/*
    - README.md
    - .spelling

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Avoid expensive initialization of dotnet cli, see: https://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  __SuppressAnsiEscapeSequences: 1

resources:
  repositories:
    - repository: Docker
      type: github
      endpoint: PowerShell
      name: PowerShell/PowerShell-Docker
      ref: master

stages:
- stage: BuildLinuxStage
  displayName: Build for Linux
  jobs:
  - template: templates/ci-build.yml
    parameters:
      pool: ubuntu-20.04
      jobName: linux_build
      displayName: linux Build
  - job: getContainerJob
    displayName: Get Container
    pool:
      vmImage: ubuntu-20.04
    steps:
    - checkout: self
      clean: true

    - checkout: Docker
      clean: true

    - pwsh: |
        $matrix = ./PowerShell-Docker/build.ps1 -GenerateMatrixJson -FullJson -Channel preview | ConvertFrom-Json
        $linuxImages = $matrix.preview |
          Where-Object {$_.osversion -notlike '*windows*' -and $_.osversion -notlike '*nano*' -and $_.osversion -notlike 'alpine*' -and $_.osversion -notlike '*arm*'} |
          Select-Object -First 100  JobName, Taglist |
          Sort-Object -property JobName
        $marinerImage = $linuxImages | where-object {$_.JobName -like 'mariner*'}
        Import-Module ./PowerShell/tools/ci.psm1
        $tag = $marinerImage.Taglist -split ';' | select-object -first 1
        $containerName = "mcr.microsoft.com/powershell/test-deps:$tag"
        Set-BuildVariable -Name containerName -Value $containerName -IsOutput
        Set-BuildVariable -Name containerBuildName -Value $marinerImage.JobName -IsOutput
      name: getContainerTask
      displayName: Get Container
      continueOnError: true

- stage: TestUbuntu
  displayName: Test for Ubuntu
  dependsOn: [BuildLinuxStage]
  jobs:
  - template: templates/nix-test.yml
    parameters:
      name: Ubuntu
      pool: ubuntu-20.04
      purpose: UnelevatedPesterTests
      tagSet: CI

  - template: templates/nix-test.yml
    parameters:
      name: Ubuntu
      pool: ubuntu-20.04
      purpose: ElevatedPesterTests
      tagSet: CI

  - template: templates/nix-test.yml
    parameters:
      name: Ubuntu
      pool: ubuntu-20.04
      purpose: UnelevatedPesterTests
      tagSet: Others

  - template: templates/nix-test.yml
    parameters:
      name: Ubuntu
      pool: ubuntu-20.04
      purpose: ElevatedPesterTests
      tagSet: Others

  - template: templates/verify-xunit.yml
    parameters:
      pool: ubuntu-20.04

- stage: TestContainer
  displayName: Test in a container
  dependsOn: [BuildLinuxStage]
  condition: and(succeeded(), ne(dependencies.BuildLinuxStage.outputs['getContainerJob.getContainerJob.getContainerTask.containerName'],''))
  variables:
    containerName: $[ dependencies.BuildLinuxStage.outputs['getContainerJob.getContainerJob.getContainerTask.containerName']]
    containerBuildName: $[ dependencies.BuildLinuxStage.outputs['getContainerJob.getContainerJob.getContainerTask.containerBuildName']]
  jobs:
  - template: templates/nix-test.yml
    parameters:
      name: container
      pool: ubuntu-20.04
      purpose: UnelevatedPesterTests
      tagSet: CI
      containerName: mcr.microsoft.com/powershell/test-deps:preview-mariner-1.0
  - template: templates/nix-test.yml
    parameters:
      name: container
      pool: ubuntu-20.04
      purpose: ElevatedPesterTests
      tagSet: CI
      containerName: $(containerName)

- stage: PackageLinux
  displayName: Package Linux
  dependsOn: ["BuildLinuxStage"]
  jobs:
  - template: linux/templates/packaging.yml
    parameters:
      pool: ubuntu-20.04
