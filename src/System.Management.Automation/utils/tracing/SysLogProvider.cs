#if UNIX

using System;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

using System.Management.Automation.Internal;

namespace System.Management.Automation.Tracing
{
    /// <summary>
    /// Encapsulates the message resource and SysLog logging for an ETW event.
    /// The other half of the partial class is generated by EtwGen and contains a
    /// static dictionary containing the event id mapped to the associated event meta data
    /// and resource string reference.
    /// </summary>
    internal class SysLogProvider
    {
        static readonly int _processId;
        static string _gitCommitId;
        static readonly int _commitId;
        [ThreadStatic]
        static Guid _activity = Guid.NewGuid();

        static SysLogProvider()
        {
            _processId = Process.GetCurrentProcess().Id;
            // full git commit id string. Will be logged with the associated hash code.
            _gitCommitId = PSVersionInfo.GitCommitId;
            // has value for the commit id string.
            _commitId = _gitCommitId.GetHashCode();
        }

        public SysLogProvider()
        {
            NativeMethods.OpenLog("powershell");
            LogCommit();
        }

        #region resource manager

        private static global::System.Resources.ResourceManager _resourceManager;
        private static global::System.Globalization.CultureInfo _resourceCulture;

        private static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(_resourceManager, null))
                {
                    _resourceManager = new global::System.Resources.ResourceManager("System.Management.Automation.resources.EventResource", typeof(EventResource).GetTypeInfo().Assembly);
                }
                return _resourceManager;
            }
        }

        /// <summary>
        ///   Overrides the current threads CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return _resourceCulture;
            }
            set
            {
                _resourceCulture = value;
            }
        }

        private static string GetResourceString(string resourceName)
        {
            string value = ResourceManager.GetString(resourceName, Culture);
            if (string.IsNullOrEmpty(value))
            {
                value = string.Format(CultureInfo.InvariantCulture, "Unknown resource: {0}", resourceName);
                Diagnostics.Assert(false, value);
            }
            return value;
        }

        #endregion resource manager

        /// <summary>
        /// Gets the EventMessage for a given event.
        /// </summary>
        /// <param name="sb">The StringBuilder to append.</param>
        /// <param name="eventId">The id of the event to retrieve.</param>
        /// <param name="args">An array of zero or more payload objects</param>
        private static void GetEventMessage(StringBuilder sb, int eventId, params object[] args )
        {
            EventResource resource = EventResource.GetMessage(eventId);

            if (resource == null)
            {
                resource = EventResource.GetMissingEventMessage();
                string resourceValue = GetResourceString(resource.Name);
                sb.AppendFormat(CultureInfo.InvariantCulture, resourceValue, eventId);

                // If an event id was specified that is not found in the event resource lookup table,
                // use a placeholder message that includes the event id.
                Diagnostics.Assert(false, sb.ToString());
            }
            else
            {
                string resourceValue = GetResourceString(resource.Name);
                if (resource.ParameterCount > 0)
                {
                    sb.AppendFormat(resourceValue, args);
                }
                else
                {
                    sb.Append(resourceValue);
                }
            }
        }

        #region logging

        // maps a LogLevel to an associated SysLogPriority
        static NativeMethods.SysLogPriority[] _levels =
        {
            NativeMethods.SysLogPriority.Info,
            NativeMethods.SysLogPriority.Critical,
            NativeMethods.SysLogPriority.Error,
            NativeMethods.SysLogPriority.Warning,
            NativeMethods.SysLogPriority.Info,
            NativeMethods.SysLogPriority.Info
        };

        /// <summary>
        /// Logs a activity transfer
        /// </summary>
        /// <param name="parentActivityId">The </param>
        public void LogTransfer(Guid parentActivityId)
        {
            int threadId = Thread.CurrentThread.ManagedThreadId;
            string message = string.Format
            (
                CultureInfo.InvariantCulture,
                "{0:X}:{1:X}:{2:X} Transfer: {3} {4}", _commitId, _processId, threadId,
                parentActivityId.ToString("D"),
                _activity.ToString("D")
            );

            NativeMethods.SysLog(NativeMethods.SysLogPriority.Info | NativeMethods.SysLogPriority.User, message);
        }

        /// <summary>
        /// Logs the activity identifier for the current thread.
        /// </summary>
        /// <param name="activity">The Guid activity identifier</param>
        public void SetActivity(Guid activity)
        {
            int threadId = Thread.CurrentThread.ManagedThreadId;
            _activity = activity;
            string message = string.Format(CultureInfo.InvariantCulture, "{0:X}:{1:X}:{2:X} Activity: {3}", _commitId, _processId, threadId, activity.ToString("D"));

            NativeMethods.SysLog(NativeMethods.SysLogPriority.Info | NativeMethods.SysLogPriority.User, message);
        }

        static void LogCommit()
        {
            string message = string.Format(CultureInfo.InvariantCulture, "{0:X}:{1:X} GitCommitId: {3} Hash: {0:X}", _commitId, _processId, _gitCommitId);
            NativeMethods.SysLog(NativeMethods.SysLogPriority.Info | NativeMethods.SysLogPriority.User, message);
        }

        /// <summary>
        /// Writes a log entry
        /// </summary>
        /// <param name="eventId">The event id of the log entry.</param>
        /// <param name="channel">The channel to log</param>
        /// <param name="task">The task for the log entry</param>
        /// <param name="opcode">The operation for the log entry</param>
        /// <param name="level">The logging level.</param>
        /// <param name="args">The payload for the log message</param>
        public void Log(int eventId, PSChannel channel, PSTask task, PSOpcode opcode, PSLevel level, params object[] args)
        {
            int threadId = Thread.CurrentThread.ManagedThreadId;

            StringBuilder sb = new StringBuilder();

            // add the message preamble
            sb.AppendFormat(CultureInfo.InvariantCulture, "{0:X}:{1:X}:{2:X} {3:X}.{4:G}.{5:G}.{6:G}:", _commitId, _processId, threadId, eventId, task, opcode, level);

            // add the message
            GetEventMessage(sb, eventId, args);

            NativeMethods.SysLogPriority priority = NativeMethods.SysLogPriority.User;
            if ((int) level <= _levels.Length)
            {
                priority |= _levels[(int)level];
            }
            else
            {
                priority |= NativeMethods.SysLogPriority.Info;
            }
            // log it.
            NativeMethods.SysLog(priority, sb.ToString());
        }

        #endregion logging
    }

    internal enum LogLevel : uint
    {
        Always = 0,
        Critical = 1,
        Error = 2,
        Warning = 3,
        Information = 4,
        Verbose = 5
    }

    internal static class NativeMethods
    {
        /// <summary>
        /// Write a message to the system logger, which in turn writes the message to the system console, log files, etc.
        /// See man 3 syslog for more info
        /// </summary>
        /// <param name="priority">
        /// The OR of a priority and facility in the SysLogPriority enum indicating the the priority and facility of the log entry
        /// </param>
        /// <param name="message">The message to put in the log entry</param>
        [DllImport("psl-native", CharSet = CharSet.Ansi, EntryPoint = "Native_SysLog")]
        internal static extern void SysLog(SysLogPriority priority, string message);

        [DllImport("psl-native", CharSet = CharSet.Ansi, EntryPoint = "Native_OpenLog")]
        internal static extern void OpenLog(string ident);

        [DllImport("psl-native", EntryPoint = "Native_CloseLog")]
        internal static extern void CloseLog();

        [Flags]
        internal enum SysLogPriority : uint
        {
            // Priorities
            /// <summary>
            /// system is unusable
            /// </summary>
            Emergency       = 0,

            /// <summary>
            /// action must be taken immediately
            /// </summary>
            Alert           = 1,

            /// <summary>
            /// critical conditions
            /// </summary>
            Critical        = 2,

            /// <summary>
            /// error conditions
            /// </summary>
            Error           = 3,

            /// <summary>
            /// warning conditions
            /// </summary>
            Warning         = 4,

            /// <summary>
            /// normal but significant condition
            /// </summary>
            Notice          = 5,

            /// <summary>
            /// informational
            /// </summary>
            Info            = 6,

            /// <summary>
            /// debug-level messages
            /// </summary>
            Debug           = 7,

            // facilities

            /// <summary>
            /// kernel messages
            /// </summary>
            Kernel          = (0<<3),

            /// <summary>
            /// random user-level messages
            /// </summary>
            User            = (1<<3),

            /// <summary>
            /// mail system
            /// </summary>
            Mail            = (2<<3),

            /// <summary>
            /// system daemons
            /// </summary>
            Daemon          = (3<<3),

            /// <summary>
            /// authorization messages
            /// </summary>
            Authorization   = (4<<3),

            /// <summary>
            /// messages generated internally by syslogd
            /// </summary>
            Syslog          = (5<<3),

            /// <summary>
            /// line printer subsystem
            /// </summary>
            Lpr             = (6<<3),

            /// <summary>
            /// network news subsystem
            /// </summary>
            News            = (7<<3),

            /// <summary>
            /// UUCP subsystem
            /// </summary>
            Uucp            = (8<<3),

            /// <summary>
            /// clock daemon
            /// </summary>
            Cron            = (9<<3),

            /// <summary>
            /// security/authorization messages (private)
            /// </summary>
            Authpriv        = (10<<3),

            /// <summary>
            /// ftp daemon
            /// </summary>
            Ftp             = (11<<3),

            // Reserved for system use

            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local0          = (16<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local1          = (17<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local2          = (18<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local3          = (19<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local4          = (20<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local5          = (21<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local6          = (22<<3),
            /// <summary>
            /// Reserved for local use
            /// </summary>
            Local7          = (23<<3),
        }
    }
}

#endif // UNIX