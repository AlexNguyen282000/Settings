#if UNIX
/*
    This code was generated by the tools\ResxGen\ResxGen.ps1 run against PowerShell-Core-Instrumentation.man.
    To add or change logged events and the associated resources, edit Microsoft-Windows-PowerShell-Instrumentation.man
    then rerun ResxGen.ps1 to produce an updated CS and Resx file.
*/
using System.Collections.Generic;
using System.Management.Automation.Internal;
using System.Runtime.InteropServices;

namespace System.Management.Automation.Tracing
{
    /// <summary>
    /// Provides a class for describing a message resource for an ETW event.
    /// </summary>
    internal class EventResource
    {
        /// <summary>
        /// Initializes a new instance of this class
        /// </summary>
        /// <param name="resourceName">The name of the message resource</param>
        /// <param name="parameterCount">The number of required to format the message</param>
        public EventResource(string resourceName, int parameterCount)
        {
            this.Name = resourceName;
            this.ParameterCount = parameterCount;
        }

        /// <summary>
        /// The resource name for the message resource
        /// </summary>
        public string Name {get; private set;}

        /// <summary>
        /// The number of parameters needed to format the message
        /// </summary>
        public int ParameterCount {get; private set;}

        #region Static Fields and Methods

        private static Dictionary<int, EventResource> _resources = new Dictionary<int, EventResource>();

        /// <summary>
        /// Gets the EventResource describing the message resource for the specified event id.
        /// </summary>
        /// <param name="eventId">The event id for the message resource to retrieve.</param>
        /// <returns>A EventResource for the specified event id; otherwise, a null reference.</returns>
        public static EventResource GetMessage(int eventId)
        {
            EventResource result = null;
            _resources.TryGetValue(eventId, out  result);
            return result;
        }

        const int MissingEventId = -1;

        /// <summary>
        /// Gets the EventResource describing the a message resource used when an valid event id
        /// is not found.
        /// </summary>
        public static EventResource GetMissingEventMessage()
        {
            return GetMessage(MissingEventId);
        }

        static EventResource()
        {
            // Add the resource for mismatched event ids.
            _resources.Add(MissingEventId, new EventResource("MissingEventIdMessage", 1));

            _resources.Add(53249, new EventResource("PS_PROVIDEReventE_O_ScheduledJobStarted", 2));
            _resources.Add(53250, new EventResource("PS_PROVIDEReventE_O_ScheduledJobCompleted", 3));
            _resources.Add(53251, new EventResource("PS_PROVIDEReventE_O_ScheduledJobException", 4));
            _resources.Add(45063, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowPluginStarted", 5));
            _resources.Add(45064, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowExecutionStarted", 2));
            _resources.Add(45065, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowStateChanged", 3));
            _resources.Add(45072, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowPluginRequestedToShutdown", 1));
            _resources.Add(45073, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowPluginRestarted", 1));
            _resources.Add(45074, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowWorkflowsResuming", 1));
            _resources.Add(45075, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowQuotaViolationDetected", 4));
            _resources.Add(45076, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowWorkflowsResumed", 1));
            _resources.Add(45078, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowRunspacePoolCreated", 2));
            _resources.Add(45079, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowActivityExecutionQueued", 2));
            _resources.Add(45080, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowActivityExecutionStarted", 2));
            _resources.Add(45081, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportingFromXaml", 2));
            _resources.Add(45082, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportedFromXaml", 2));
            _resources.Add(45083, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlError", 2));
            _resources.Add(45084, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlValidationStarted", 1));
            _resources.Add(45085, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlValidationFinishedSuccessfully", 1));
            _resources.Add(45086, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlValidationFinishedWithError", 1));
            _resources.Add(45087, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlActivityValidated", 3));
            _resources.Add(45088, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowImportFromXamlActivityValidationFailed", 3));
            _resources.Add(45089, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowActivityExecutionFailed", 3));
            _resources.Add(45090, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowRunspaceAvailabilityChanged", 2));
            _resources.Add(45091, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowRunspaceStateChanged", 3));
            _resources.Add(45092, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowLoadedForExecution", 1));
            _resources.Add(45093, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowUnloaded", 1));
            _resources.Add(45094, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowCancelled", 1));
            _resources.Add(45095, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowAborted", 1));
            _resources.Add(45096, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowCleanup", 1));
            _resources.Add(45097, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowLoadedFromDisk", 2));
            _resources.Add(45098, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowDeletedFromDisk", 2));
            _resources.Add(45100, new EventResource("PS_PROVIDEReventE_O_M3PRemoveJobStarted", 1));
            _resources.Add(45101, new EventResource("PS_PROVIDEReventE_O_M3PJobStateChanged", 4));
            _resources.Add(45102, new EventResource("PS_PROVIDEReventE_O_M3PJobError", 3));
            _resources.Add(45104, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowJobCreated", 3));
            _resources.Add(45105, new EventResource("PS_PROVIDEReventE_O_M3PParentJobCreated", 1));
            _resources.Add(45106, new EventResource("PS_PROVIDEReventE_O_M3PJobCreationCompleted", 2));
            _resources.Add(45107, new EventResource("PS_PROVIDEReventE_O_M3PJobRemoved", 3));
            _resources.Add(45108, new EventResource("PS_PROVIDEReventE_O_M3PJobRemoveError", 4));
            _resources.Add(45109, new EventResource("PS_PROVIDEReventE_O_M3PLoadingWorkflowForExecution", 1));
            _resources.Add(45110, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowExecutionFinished", 1));
            _resources.Add(45111, new EventResource("PS_PROVIDEReventE_O_M3PCancellingWorkflowExecution", 1));
            _resources.Add(45112, new EventResource("PS_PROVIDEReventE_O_M3PAbortingWorkflowExecution", 2));
            _resources.Add(45113, new EventResource("PS_PROVIDEReventE_O_M3PUnloadingWorkflow", 1));
            _resources.Add(45114, new EventResource("PS_PROVIDEReventE_O_M3PForcedWorkflowShutdownStarted", 1));
            _resources.Add(45115, new EventResource("PS_PROVIDEReventE_O_M3PForcedWorkflowShutdownFinished", 1));
            _resources.Add(45116, new EventResource("PS_PROVIDEReventE_O_M3PForcedWorkflowShutdownError", 2));
            _resources.Add(45117, new EventResource("PS_PROVIDEReventE_O_M3PPersistingWorkflow", 2));
            _resources.Add(45118, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowPersisted", 1));
            _resources.Add(45119, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowActivityExecutionFinished", 1));
            _resources.Add(45120, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowExecutionError", 2));
            _resources.Add(45121, new EventResource("PS_PROVIDEReventE_O_M3PEndpointRegistered", 3));
            _resources.Add(45122, new EventResource("PS_PROVIDEReventE_O_M3PEndpointModified", 2));
            _resources.Add(45123, new EventResource("PS_PROVIDEReventE_O_M3PEndpointUnregistered", 2));
            _resources.Add(45124, new EventResource("PS_PROVIDEReventE_O_M3PEndpointDisabled", 2));
            _resources.Add(45125, new EventResource("PS_PROVIDEReventE_O_M3PEndpointEnabled", 2));
            _resources.Add(45126, new EventResource("PS_PROVIDEReventE_O_M3POutOfProcessRunspaceStarted", 1));
            _resources.Add(45127, new EventResource("PS_PROVIDEReventE_O_M3PParameterSplattingWasPerformed", 2));
            _resources.Add(45128, new EventResource("PS_PROVIDEReventE_O_M3PWorkflowEngineStarted", 1));
            _resources.Add(45129, new EventResource("PS_PROVIDEReventE_D_M3PWORKFLOW_MANAGER_CHECKPOINTPATH", 4));
            _resources.Add(4097, new EventResource("PS_PROVIDEReventE_O_CMDLETS_HOSTNAMERESOLVE", 0));
            _resources.Add(4098, new EventResource("PS_PROVIDEReventE_O_CMDLETS_SCHEMERESOLVE", 0));
            _resources.Add(4099, new EventResource("PS_PROVIDEReventE_O_CMDLETS_SHELLRESOLVE", 0));
            _resources.Add(4100, new EventResource("PS_PROVIDEReventE_O_COMMAND_HEALTH", 3));
            _resources.Add(4101, new EventResource("PS_PROVIDEReventE_O_ENGINE_HEALTH", 3));
            _resources.Add(4102, new EventResource("PS_PROVIDEReventE_O_PROVIDER_HEALTH", 3));
            _resources.Add(4103, new EventResource("PS_PROVIDEReventE_O_PIPELINE_DETAIL", 3));
            _resources.Add(4104, new EventResource("PS_PROVIDEReventE_O_SCRIPTBLOCK_CREATE_DETAIL", 5));
            _resources.Add(4105, new EventResource("PS_PROVIDEReventE_O_SCRIPTBLOCK_INVOKE_START_DETAIL", 2));
            _resources.Add(4106, new EventResource("PS_PROVIDEReventE_O_SCRIPTBLOCK_INVOKE_COMPLETE_DETAIL", 2));
            _resources.Add(7937, new EventResource("PS_PROVIDEReventE_A_COMMAND_LIFECYCLE", 3));
            _resources.Add(7938, new EventResource("PS_PROVIDEReventE_A_ENGINE_LIFECYCLE", 3));
            _resources.Add(7939, new EventResource("PS_PROVIDEReventE_A_PROVIDER_LIFECYCLE", 3));
            _resources.Add(7940, new EventResource("PS_PROVIDEReventE_A_SETTINGS", 3));
            _resources.Add(7941, new EventResource("PS_PROVIDEReventE_A_WriteTransferEvent", 2));
            _resources.Add(7942, new EventResource("PS_PROVIDEReventE_A_ENGINE_TRACE", 8));
            _resources.Add(8193, new EventResource("PS_PROVIDEReventE_O_RUNSPACE_CONSTRUCTOR", 1));
            _resources.Add(8194, new EventResource("PS_PROVIDEReventE_O_RUNSPACEPOOL_CONSTRUCTOR", 3));
            _resources.Add(8195, new EventResource("PS_PROVIDEReventE_O_RUNSPACEPOOL_OPEN", 0));
            _resources.Add(8196, new EventResource("PS_PROVIDEReventE_O_RUNSPACEPOOL_TRANSFER", 0));
            _resources.Add(8197, new EventResource("PS_PROVIDEReventE_O_RUNSPACE_STATE_CHANGE", 1));
            _resources.Add(8198, new EventResource("PS_PROVIDEReventE_O_REMOTE_RUNSPACE_CREATE_RETRY", 3));
            _resources.Add(53504, new EventResource("PS_PROVIDEReventE_O_REMOTE_NAMEDPIPE_LISTENER_START", 2));
            _resources.Add(53505, new EventResource("PS_PROVIDEReventE_O_REMOTE_NAMEDPIPE_LISTENER_END", 2));
            _resources.Add(53506, new EventResource("PS_PROVIDEReventE_O_REMOTE_NAMEDPIPE_LISTENER_ERROR", 3));
            _resources.Add(53507, new EventResource("PS_PROVIDEReventE_O_REMOTE_NAMEDPIPE_CONNECT", 3));
            _resources.Add(53508, new EventResource("PS_PROVIDEReventE_O_REMOTE_NAMEDPIPE_DISCONNECT", 3));
            _resources.Add(12033, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_PORT", 1));
            _resources.Add(12034, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_APPNAME", 1));
            _resources.Add(12035, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_COMPUTERNAME", 1));
            _resources.Add(12036, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_SCHEME", 1));
            _resources.Add(12037, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_TEST", 0));
            _resources.Add(12038, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_WSMANCONNECTIONINFO", 9));
            _resources.Add(12039, new EventResource("PS_PROVIDEReventE_A_RUNSPACEPOOL_TRANSFER", 0));
            _resources.Add(32769, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_RCVDOBJ", 5));
            _resources.Add(32775, new EventResource("PS_PROVIDEReventE_A_APPDOMAIN_UNHANDLED_EXCEPTION", 3));
            _resources.Add(32776, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_ERROR", 5));
            _resources.Add(32777, new EventResource("PS_PROVIDEReventE_O_APPDOMAIN_UNHANDLED_EXCEPTION", 3));
            _resources.Add(32784, new EventResource("PS_PROVIDEReventE_O_TRANSPORT_ERROR", 5));
            _resources.Add(32785, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_CONNECT", 1));
            _resources.Add(32786, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SHELL_CONNECT_CALLBACK", 1));
            _resources.Add(32787, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SHELL_CLOSE", 1));
            _resources.Add(32788, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SHELL_CLOSE_CALLBACK", 1));
            _resources.Add(32789, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SEND_DATA", 3));
            _resources.Add(32790, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SEND_DATA_CALLBACK", 2));
            _resources.Add(32791, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_RECEIVE_DATA", 2));
            _resources.Add(32792, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_RECEIVE_DATA_CALLBACK", 3));
            _resources.Add(32793, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_CMD_CONNECT", 2));
            _resources.Add(32800, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_CMD_CONNECT_CALLBACK", 2));
            _resources.Add(32801, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_CMD_CLOSE", 2));
            _resources.Add(32802, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_CMD_CLOSE_CALLBACK", 2));
            _resources.Add(32803, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SIGNAL", 3));
            _resources.Add(32804, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SIGNAL_CALLBACK", 2));
            _resources.Add(32805, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_URI_REDIRECTION", 2));
            _resources.Add(32849, new EventResource("PS_PROVIDEReventE_A_TRANSPORT_SERVER_SEND_DATA", 5));
            _resources.Add(32850, new EventResource("PS_PROVIDEReventE_A_CREATE_SERVER_REMOTESESSION", 3));
            _resources.Add(32851, new EventResource("PS_PROVIDEReventE_A_REPORT_CONTEXT", 1));
            _resources.Add(32852, new EventResource("PS_PROVIDEReventE_A_REPORT_OPERATION_COMPLETE", 4));
            _resources.Add(32853, new EventResource("PS_PROVIDEReventE_A_CREATE_COMMAND_REMOTESESSION", 2));
            _resources.Add(32854, new EventResource("PS_PROVIDEReventE_A_STOP_COMMAND", 3));
            _resources.Add(32855, new EventResource("PS_PROVIDEReventE_A_SERVER_RECEIVED_DATA", 3));
            _resources.Add(32856, new EventResource("PS_PROVIDEReventE_A_SERVER_RECEIVE_REQUEST", 3));
            _resources.Add(32857, new EventResource("PS_PROVIDEReventE_A_SERVER_CLOSE_OPERATION", 3));
            _resources.Add(32865, new EventResource("PS_PROVIDEReventE_A_LOAD_PSCUSTOMSHELL_ASSEMBLY", 2));
            _resources.Add(32866, new EventResource("PS_PROVIDEReventE_A_LOAD_PSCUSTOMSHELL_TYPE", 2));
            _resources.Add(32867, new EventResource("PS_PROVIDEReventE_A_RECEIVED_FRAGMENT", 6));
            _resources.Add(32868, new EventResource("PS_PROVIDEReventE_A_SENT_FRAGMENT", 6));
            _resources.Add(32869, new EventResource("PS_PROVIDEReventE_A_SHUTTING_DOWN", 0));
            _resources.Add(28673, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_REHYDRATION_SUCCESS", 3));
            _resources.Add(28674, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_REHYDRATION_FAILURE", 4));
            _resources.Add(28675, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_DEPTH_OVERRIDE", 4));
            _resources.Add(28676, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_MODE_OVERRIDE", 2));
            _resources.Add(28677, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_SCRIPT_PROPERTY_WITHOUT_RUNSPACE", 3));
            _resources.Add(28678, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_PROPERTY_GETTER_FAILED", 4));
            _resources.Add(28679, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_ENUMERATION_FAILED", 2));
            _resources.Add(28680, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_TOSTRING_FAILED", 2));
            _resources.Add(28682, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_MAX_DEPTH_WHEN_SERIALIZING", 3));
            _resources.Add(28683, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_XMLEXCEPTION_WHEN_DESERIALIZING", 3));
            _resources.Add(28684, new EventResource("PS_PROVIDEReventE_A_SERIALIZER_SPECIFIC_PROPERTY_MISSING", 2));
            _resources.Add(40961, new EventResource("PS_PROVIDEReventE_O_PowershellConsoleStartupStart", 0));
            _resources.Add(40962, new EventResource("PS_PROVIDEReventE_O_PowershellConsoleStartupStop", 0));
            _resources.Add(49152, new EventResource("PS_PROVIDEReventE_D_DebugMessage", 1));
            _resources.Add(45057, new EventResource("PS_PROVIDEReventE_D_Powershell_ErrorRecord", 8));
            _resources.Add(45058, new EventResource("PS_PROVIDEReventE_D_Powershell_Exception", 3));
            _resources.Add(45059, new EventResource("PS_PROVIDEReventE_O_Powershell_PSObject", 0));
            _resources.Add(45060, new EventResource("PS_PROVIDEReventE_D_Powershell_Job", 6));
            _resources.Add(45061, new EventResource("PS_PROVIDEReventE_D_MESSAGE", 1));
            _resources.Add(45062, new EventResource("PS_PROVIDEReventE_A_RUNSPACE_WSMANCONNECTIONINFO", 9));
            _resources.Add(49153, new EventResource("PS_PROVIDEReventE_D_MESSAGE2", 2));
            _resources.Add(46337, new EventResource("PS_PROVIDEReventE_D_M3PBeginStartWorkflowApplication", 1));
            _resources.Add(46338, new EventResource("PS_PROVIDEReventE_D_M3PEndStartWorkflowApplication", 1));
            _resources.Add(46339, new EventResource("PS_PROVIDEReventE_D_M3PBeginCreateNewJob", 1));
            _resources.Add(46340, new EventResource("PS_PROVIDEReventE_D_M3PEndCreateNewJob", 1));
            _resources.Add(46341, new EventResource("PS_PROVIDEReventE_D_M3PTrackingGuidContainerParentJobCorrelation", 2));
            _resources.Add(46342, new EventResource("PS_PROVIDEReventE_D_M3PBeginJobLogic", 1));
            _resources.Add(46343, new EventResource("PS_PROVIDEReventE_D_M3PEndJobLogic", 1));
            _resources.Add(46344, new EventResource("PS_PROVIDEReventE_D_M3PBeginWorkflowExecution", 1));
            _resources.Add(46345, new EventResource("PS_PROVIDEReventE_D_M3PEndWorkflowExecution", 1));
            _resources.Add(46346, new EventResource("PS_PROVIDEReventE_D_M3PChildWorkflowJobAddition", 2));
            _resources.Add(46347, new EventResource("PS_PROVIDEReventE_D_M3PProxyJobRemoteJobAssociation", 2));
            _resources.Add(46348, new EventResource("PS_PROVIDEReventE_D_M3PBeginContainerParentJobExecution", 1));
            _resources.Add(46349, new EventResource("PS_PROVIDEReventE_D_M3PEndContainerParentJobExecution", 1));
            _resources.Add(46350, new EventResource("PS_PROVIDEReventE_D_M3PBeginProxyJobExecution", 1));
            _resources.Add(46351, new EventResource("PS_PROVIDEReventE_D_M3PEndProxyJobExecution", 1));
            _resources.Add(46352, new EventResource("PS_PROVIDEReventE_D_M3PBeginProxyJobEventHandler", 1));
            _resources.Add(46353, new EventResource("PS_PROVIDEReventE_D_M3PEndProxyJobEventHandler", 1));
            _resources.Add(46354, new EventResource("PS_PROVIDEReventE_D_M3PBeginProxyChildJobEventHandler", 1));
            _resources.Add(46355, new EventResource("PS_PROVIDEReventE_D_M3PEndProxyChildJobEventHandler", 1));
            _resources.Add(46356, new EventResource("PS_PROVIDEReventE_D_M3PBeginRunGarbageCollection", 0));
            _resources.Add(46357, new EventResource("PS_PROVIDEReventE_D_M3PEndRunGarbageCollection", 0));
            _resources.Add(46358, new EventResource("PS_PROVIDEReventE_O_M3PPERSISTENCE_STORE_MAXSIZE_REACHED", 0));
            _resources.Add(24577, new EventResource("PS_PROVIDEReventE_O_ISEExecuteScript", 1));
            _resources.Add(24578, new EventResource("PS_PROVIDEReventE_O_ISEExecuteSelection", 1));
            _resources.Add(24579, new EventResource("PS_PROVIDEReventE_O_ISEStopCommand", 0));
            _resources.Add(24580, new EventResource("PS_PROVIDEReventE_O_ISEResumeDebugger", 0));
            _resources.Add(24581, new EventResource("PS_PROVIDEReventE_O_ISEStopDebugger", 0));
            _resources.Add(24582, new EventResource("PS_PROVIDEReventE_O_ISEDebuggerStepInto", 0));
            _resources.Add(24583, new EventResource("PS_PROVIDEReventE_O_ISEDebuggerStepOver", 0));
            _resources.Add(24584, new EventResource("PS_PROVIDEReventE_O_ISEDebuggerStepOut", 0));
            _resources.Add(24592, new EventResource("PS_PROVIDEReventE_O_ISEEnableAllBreakpoints", 0));
            _resources.Add(24593, new EventResource("PS_PROVIDEReventE_O_ISEDisableAllBreakpoints", 0));
            _resources.Add(24594, new EventResource("PS_PROVIDEReventE_O_ISERemoveAllBreakpoints", 0));
            _resources.Add(24595, new EventResource("PS_PROVIDEReventE_O_ISESetBreakpoint", 2));
            _resources.Add(24596, new EventResource("PS_PROVIDEReventE_O_ISERemoveBreakpoint", 2));
            _resources.Add(24597, new EventResource("PS_PROVIDEReventE_O_ISEEnableBreakpoint", 2));
            _resources.Add(24598, new EventResource("PS_PROVIDEReventE_O_ISEDisableBreakpoint", 2));
            _resources.Add(24599, new EventResource("PS_PROVIDEReventE_O_ISEHitBreakpoint", 2));
        }

        #endregion Static Fields and Methods
    }
}
#endif
