// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System;
using System.Globalization;

using Microsoft.CodeAnalysis;

namespace System.Management.Automation.Internal.Generators
{
    /// <summary>
    /// Source Code Generator to create partial PSVersionInfo class.
    /// </summary>
    [Generator]
    public class PSVersionInfoGenerator : ISourceGenerator
    {
        /// <summary>
        /// Generate output PSVersionInfo.generated.cs file.
        /// This allows to directly get ProductVersion and others without reflection.
        /// </summary>
        /// <param name="context">Generator execution context.</param>
        public void Execute(GeneratorExecutionContext context)
        {
            var result = CreatePSVersionInfoPartialClass(context);

            // We must use specific file name suffix (*.g.cs,*.g, *.i.cs, *.generated.cs, *.designer.cs)
            // so that Roslyn analyzers skip the file.
            context.AddSource("PSVersionInfo.generated.cs", result);
        }

        /// <summary>
        /// Not used.
        /// </summary>
        /// <param name="context">Generator initialization context.</param>
        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one.
        }

        /// <summary>
        /// Create a string with partial PSVersionInfo class.
        /// </summary>
        /// <param name="context">Generator execution context.</param>
        /// <returns>A string with partial PSVersionInfo class.</returns>
        private static string CreatePSVersionInfoPartialClass(GeneratorExecutionContext context)
        {
            // We must put "<auto-generated" on first line so that Roslyng analizers skip the file.
            const string SourceTemplate = @"
// <auto-generated>
// This file is auto-generated by PSVersionInfoGenerator.
// </auto-generated>

    namespace System.Management.Automation
{{
    public static partial class PSVersionInfo
    {{
        // Defined in PowerShell.Common.props as ProductVersion
        // '6.0.0-beta.7 Commits: 29 SHA: 52c6b...'
        internal static string ProductVersion {{ get; }} = ""{0}"";

        // Defined in PowerShell.Common.props as
        // git describe --abbrev=60 --long
        // 'v6.0.0-beta.7-29-g52c6b...'
        private static readonly string _rawGitCommitId = ""{1}"";

        // Defined in PowerShell.Common.props as PSCoreBuildVersion
        // '6.0.0-beta.7'
        private static readonly string _mainVersion = ""{2}"";
    }}
}}";

            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.ProductVersion", out var productVersion);
            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PowerShellVersion", out var rawGitCommitId);
            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.PSCoreBuildVersion", out var mainVersion);
            context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.ReleaseTag", out var releaseTag);

            string gitCommitId = string.IsNullOrEmpty(releaseTag) ? rawGitCommitId : releaseTag;
            if (gitCommitId.StartsWith("v"))
            {
                gitCommitId = gitCommitId.Substring(1);
            }

            return string.Format(CultureInfo.InvariantCulture, SourceTemplate, productVersion, gitCommitId, mainVersion);
        }
    }
}
