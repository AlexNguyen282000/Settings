name: vpack-$(Build.BuildId)
trigger:
  branches:
    include:
    - master
    - release*
pr:
  branches:
    include:
    - master
    - release*

variables:
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: POWERSHELL_TELEMETRY_OPTOUT
    value: 1
  - group: Azure Blob variable group

# Set AzDevOps Agent to clean the machine after the end of the build
resources:
- repo: self
  clean: true

jobs:
- job: vpack
  displayName: vpack
  condition: succeeded()
  pool: Package ES Standard Build
  steps:

  - template: ./templates/SetVersionVariables.yml
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - pwsh: |
      $azcopy = "C:\Program Files (x86)\Microsoft SDKs\Azure\AzCopy\AzCopy.exe"

      & $azcopy /Source:https://$(StorageAccount).blob.core.windows.net/$(AzureVersion) /Dest:$(System.ArtifactsDirectory) /S /SourceKey:$(StorageAccountKey)
    displayName: 'Download Azure Artifacts'

  - pwsh: 'Get-ChildItem $(System.ArtifactsDirectory)\* -recurse | Select-Object -ExpandProperty Name'
    displayName: 'Capture Artifact Listing'

  - pwsh: |
      if('$(ReleaseTagVar)' -like '*-*')
      {
          throw "Don't release a vpack for a preview"
      }
    displayName: 'Verify a Stable or better build'

  - pwsh: |
      $message = @()
      Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -include *.zip, *.msi | ForEach-Object {
          if($_.Name -notmatch 'PowerShell-\d\.\d\.\d\-([a-z]*.\d+\-)?win\-(fxdependent|x64|arm32|arm64|x86|fxdependentWinDesktop)\.(msi|zip){1}')
          {
                $messageInstance = "$($_.Name) is not a valid package name"
                $message += $messageInstance
                Write-Warning $messageInstance
          }
      }

      if($message.count -gt 0){throw ($message | out-string)}
    displayName: 'Validate Zip and MSI Package Names'

  - pwsh: |
      $message = @()
      Get-ChildItem $(System.ArtifactsDirectory)\* -recurse -include *.zip, *.msi | ForEach-Object {
          if($_.Name -match 'PowerShell-\d\.\d\.\d\-([a-z]*.\d+\-)?win\-(x64)\.(zip){1}')
          {
              $destDir = "$(System.ArtifactsDirectory)\vpackx64"
              $null = new-item -ItemType Directory -Path $destDir
              Expand-Archive -Path $_.FullName -DestinationPath $destDir
              $vstsCommandString = "vso[task.setvariable variable=vpackDir]$destDir"
              Write-Host "sending " + $vstsCommandString
              Write-Host "##$vstsCommandString"
          }
      }
    displayName: 'Extract Zip'

  - task: PkgESVPack@10
    displayName: 'Package ES - VPack '
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      sourceDirectory: '$(vpackDir)'
      description: PowerShell $(version)
      pushPkgName: 'PowerShell.$(vpackBranch).PowerShell'
      configurations: Release
      platforms: x64
      target: '$(System.ArtifactsDirectory)'
      owner: tplunk
      provData: false
      version: '$(version)-testpublish'
