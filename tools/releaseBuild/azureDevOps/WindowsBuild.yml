resources:
- repo: self
  clean: true

jobs:

- job: BuildJob
  displayName: Build
  condition: succeeded()
  pool: PowerShell
  demands:
   - Agent.Image
   - USERNAME -equals issblder
  strategy:
    matrix:
      x64-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: x64
      x86-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: x86
      arm-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: arm
      arm64-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: arm64
      fxdependent-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: fxdependent

  steps:

  - task: PkgESSetupBuild@10
    displayName: 'Initialize build'
    inputs:
      useDfs: false
      productName: PowerShellCore
      branchVersion: true
      disableWorkspace: true
      disableBuildTools: true
      disableNugetPack: true
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))

  - powershell: |
        tools/releaseBuild/setReleaseTag.ps1 -ReleaseTag $(ReleaseTag)
    displayName: 'Set ReleaseTag Varibale'

  - powershell: |
       Write-Verbose -Verbose "$(Architecture)"
       
       if ('$(Architecture)' -eq 'fxdependent' -and '$(ReleaseTag)' -match '6.0.*')
       {
           $vstsCommandString = "vso[task.setvariable variable=SkipFxDependent]true"    
       }
       else
       {
           $vstsCommandString = "vso[task.setvariable variable=SkipFxDependent]false"
       }
       
       Write-Verbose -Message "$vstsCommandString " -Verbose
       Write-Host -Object "##$vstsCommandString"
    displayName: 'Skip FxDependent for PS v6.0.*'

  - powershell: |
       Import-Module $(Build.SourcesDirectory)/build.psm1 -Force
       New-NugetConfigFile -NugetFeedUrl $(AzDevOpsFeed) -UserName $(AzDevOpsFeedUserName) -ClearTextPAT $(AzDevOpsFeedPAT) -FeedName AzDevOpsFeed -Destination $(Build.SourcesDirectory)/src/Modules
       
       if(-not (Test-Path "$(Build.SourcesDirectory)/src/Modules/nuget.config"))
       {
           throw "nuget.config is not created"
       }
    displayName: 'Add nuget.config for AzDevOps feed for PSGallery modules '
    condition: ne(Variables['SkipFxDependent'], 'true')

  - powershell: |
       $version = $env:ReleaseTag.Substring(1)
       $vstsCommandString = "vso[task.setvariable variable=Version]$version"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
    displayName: 'Set Version Varibale'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       docker container prune --force
       docker container ls --all --format '{{ json .ID }}' | ConvertFrom-Json | %{docker container rm --force --volumes $_}
    displayName: 'remove all containers  [Port to PSRelease]'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       docker image ls --format '{{ json .}}'|ConvertFrom-Json|% {
           if($_.tag -eq '<none>')
           {
               $formatString = 'yyyy-MM-dd HH:mm:ss zz00'
               $createdAtString = $_.CreatedAt.substring(0,$_.CreatedAt.Length -4)
               $createdAt = [DateTime]::ParseExact($createdAtString, $formatString,[System.Globalization.CultureInfo]::InvariantCulture)
               if($createdAt -lt (Get-Date).adddays(-1))
               {
                    docker image rm $_.ID
               }
           }
       }
       exit 0
    displayName: 'remove old images [Port to PSRelease]'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       Write-verbose "--docker info---" -verbose
       docker info
       Write-verbose "--docker image ls---" -verbose
       docker image ls
       Write-verbose "--docker container ls --all---" -verbose
       docker container ls --all
       Write-verbose "--git branch ---" -verbose
       git branch
       exit 0
    displayName: 'Get Environment'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
      tools/releaseBuild/vstsbuild.ps1 -ReleaseTag $(ReleaseTag) -Name win-$(Architecture)-symbols
    displayName: 'Build Windows Universal - $(Architecture) Symbols zip'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       if ("$env:Architecture" -eq 'fxdependent') 
       {
           $(Build.SourcesDirectory)\tools\releaseBuild\updateSigning.ps1 -SkipPwshExe
       }
       else
       {
           $(Build.SourcesDirectory)\tools\releaseBuild\updateSigning.ps1
       }
    displayName: 'Update Signing Xml'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       $vstsCommandString = "vso[task.setvariable variable=Symbols]${env:Symbols_$(Architecture)}"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
    displayName: 'Get Symbols path [Update build.json]'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - task: PkgESCodeSign@10
    displayName: 'CodeSign $(Architecture)'
    inputs:
       signConfigXml: '$(Build.SourcesDirectory)\tools\releaseBuild\signing.xml'
       inPathRoot: '$(Symbols)'
       outPathRoot: '$(Symbols)\signed'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'), ne(variables['SkipFxDependent'], 'true'))
  
  - powershell: |
       New-Item -ItemType Directory -Path $(Symbols)\signed -Force
    displayName: 'Create empty signed folder'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'Manual'), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       tools/releaseBuild/vstsbuild.ps1 -ReleaseTag $(ReleaseTag) -Name win-$(Architecture)-package -BuildPath $(Symbols) -SignedFilesPath $(Symbols)\signed
    displayName: 'Build Windows Universal - $(Architecture) Package'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))


- job: ComponentRegistrationJob
  displayName: Component Registration
  dependsOn: BuildJob 
  condition: succeeded()
  pool: PowerShell
  strategy:
    matrix:
      release-anycpu:
        BuildConfiguration: release
        BuildPlatform: any cpu

  steps:

  - powershell: |
      ./tools/releaseBuild/setReleaseTag.ps1 -ReleaseTag $(ReleaseTag)
    displayName: 'Set ReleaseTag Variable'

  - powershell: |
       $version = $env:ReleaseTag.Substring(1)
       $vstsCommandString = "vso[task.setvariable variable=Version]$version"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
    displayName: 'Set Version Variable'

  - powershell: |
       docker container prune --force
       docker container ls --all --format '{{ json .ID }}' | ConvertFrom-Json | %{docker container rm --force --volumes $_}
    displayName: 'Remove all containers'
    continueOnError: true

  - powershell: |
       docker image ls --format '{{ json .}}'|ConvertFrom-Json|% {
           if($_.tag -eq '<none>')
           {
               $formatString = 'yyyy-MM-dd HH:mm:ss zz00'
               $createdAtString = $_.CreatedAt.substring(0,$_.CreatedAt.Length -4)
               $createdAt = [DateTime]::ParseExact($createdAtString, $formatString,[System.Globalization.CultureInfo]::InvariantCulture)
               if($createdAt -lt (Get-Date).adddays(-1))
               {
                    docker image rm $_.ID
               }
           }
       }
       exit 0
    displayName: 'Remove old images'
    continueOnError: true

  - powershell: |
       Write-verbose "--docker info---" -verbose
       docker info
       Write-verbose "--docker image ls---" -verbose
       docker image ls
       Write-verbose "--docker container ls --all---" -verbose
       docker container ls --all
       Write-verbose "--git branch ---" -verbose
       git branch
       exit 0
    displayName: 'Get Environment'

  - powershell: |
       ./tools/releaseBuild/vstsbuild.ps1 -ReleaseTag $(ReleaseTag) -Name win-x64-component-registration
    displayName: 'Build Windows Universal - Component Registration'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      sourceScanPath: '$(componentregistration)'
      snapshotForceEnabled: true


- job: PackageSigningJob
  displayName: Package signing
  dependsOn: BuildJob 
  condition: succeeded()
  pool: Package ES CodeHub Lab E
  strategy:
    matrix:
      release-anycpu:
        BuildConfiguration: release
        BuildPlatform: any cpu

  steps:

  - powershell: |
       tools/releaseBuild/setReleaseTag.ps1 -ReleaseTag $(ReleaseTag)
    displayName: 'Set ReleaseTag Variable'
    continueOnError: true

  - powershell: |
       $version = $env:ReleaseTag.Substring(1)
       $vstsCommandString = "vso[task.setvariable variable=Version]$version"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
       
       $azureVersion = $env:ReleaseTag.ToLowerInvariant() -replace '\.', '-'
       $vstsCommandString = "vso[task.setvariable variable=AzureVersion]$azureVersion"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
       
    displayName: 'Set Version Variable'
    continueOnError: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      downloadType: specific
    continueOnError: true

  - powershell: |
      dir "$(System.ArtifactsDirectory)\*" -Recurse
    displayName: 'dir artifacts directory'
    continueOnError: true

  - powershell: |
      Expand-Archive -Path "$(System.ArtifactsDirectory)\results\PowerShell-$(Version)-symbols-win-x86.zip" -Destination "$(Build.StagingDirectory)\symbols\x86"
    displayName: 'Expand symbols zip - x86'
    continueOnError: true
    condition: and(succeeded(), contains(variables['Architecture'], 'x86'))

  - powershell: |
      Expand-Archive -Path "$(System.ArtifactsDirectory)\results\PowerShell-$(Version)-symbols-win-x64.zip" -Destination "$(Build.StagingDirectory)\symbols\x64"
    displayName: 'Expand symbols zip - x64'
    continueOnError: true
    condition: and(succeeded(), contains(variables['Architecture'], 'x64'))

  - powershell: |
      Expand-Archive -Path "$(System.ArtifactsDirectory)\results\PowerShell-$(Version)-symbols-win-fxdependent.zip" -Destination "$(Build.StagingDirectory)\symbols\fxdependent"
    displayName: 'Expand symbols zip - fxdependent'
    continueOnError: true
    condition: and(succeeded(), contains(variables['Architecture'], 'x64'))

  - powershell: |
      tools/releaseBuild/generatePackgeSigning.ps1 -AuthenticodeFiles "$(System.ArtifactsDirectory)\signed\PowerShell-$(Version)-win-x64.msi","$(System.ArtifactsDirectory)\signed\PowerShell-$(Version)-win-x86.msi" -path "$(System.ArtifactsDirectory)\package.xml"
    displayName: 'Generate Package Signing Xml'

  - powershell: |
      Get-Content "$(System.ArtifactsDirectory)\package.xml"
    displayName: 'print signing xml'
    continueOnError: true

