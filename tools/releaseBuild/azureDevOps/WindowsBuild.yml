resources:
- repo: self
  clean: true

jobs:

- job: BuildJob
  displayName: Build
  condition: succeeded()
  pool: PowerShell
  strategy:
    matrix:
      x64-release:
        BuildConfiguration: release
        BuildPlatform: any cpu
        Architecture: x64

  steps:

  - task: PkgESSetupBuild@10
    displayName: 'Initialize build'
    inputs:
      useDfs: false
      productName: PowerShellCore
      branchVersion: true
      disableWorkspace: true
      disableBuildTools: true
      disableNugetPack: true
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))

  - powershell: |
        tools/releaseBuild/setReleaseTag.ps1 -ReleaseTag $(ReleaseTag)
    displayName: 'Set ReleaseTag Varibale'

  - powershell: |
       Write-Verbose -Verbose "$(Architecture)"
       
       if ('$(Architecture)' -eq 'fxdependent' -and '$(ReleaseTag)' -match '6.0.*')
       {
           $vstsCommandString = "vso[task.setvariable variable=SkipFxDependent]true"    
       }
       else
       {
           $vstsCommandString = "vso[task.setvariable variable=SkipFxDependent]false"
       }
       
       Write-Verbose -Message "$vstsCommandString " -Verbose
       Write-Host -Object "##$vstsCommandString"
    displayName: 'Skip FxDependent for PS v6.0.*'

  - powershell: |
       Import-Module $(Build.SourcesDirectory)/build.psm1 -Force
       New-NugetConfigFile -NugetFeedUrl $(AzDevOpsFeed) -UserName $(AzDevOpsFeedUserName) -ClearTextPAT $(AzDevOpsFeedPAT) -FeedName AzDevOpsFeed -Destination $(Build.SourcesDirectory)/src/Modules
       
       if(-not (Test-Path "$(Build.SourcesDirectory)/src/Modules/nuget.config"))
       {
           throw "nuget.config is not created"
       }
    displayName: 'Add nuget.config for AzDevOps feed for PSGallery modules '
    condition: ne(Variables['SkipFxDependent'], 'true')

  - powershell: |
       $version = $env:ReleaseTag.Substring(1)
       $vstsCommandString = "vso[task.setvariable variable=Version]$version"
       Write-Host "sending " + $vstsCommandString
       Write-Host "##$vstsCommandString"
    displayName: 'Set Version Varibale'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       docker container prune --force
       docker container ls --all --format '{{ json .ID }}' | ConvertFrom-Json | %{docker container rm --force --volumes $_}
    displayName: 'remove all containers  [Port to PSRelease]'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       docker image ls --format '{{ json .}}'|ConvertFrom-Json|% {
           if($_.tag -eq '<none>')
           {
               $formatString = 'yyyy-MM-dd HH:mm:ss zz00'
               $createdAtString = $_.CreatedAt.substring(0,$_.CreatedAt.Length -4)
               $createdAt = [DateTime]::ParseExact($createdAtString, $formatString,[System.Globalization.CultureInfo]::InvariantCulture)
               if($createdAt -lt (Get-Date).adddays(-1))
               {
                    docker image rm $_.ID
               }
           }
       }
       exit 0
    displayName: 'remove old images [Port to PSRelease]'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
       Write-verbose "--docker info---" -verbose
       docker info
       Write-verbose "--docker image ls---" -verbose
       docker image ls
       Write-verbose "--docker container ls --all---" -verbose
       docker container ls --all
       Write-verbose "--git branch ---" -verbose
       git branch
       exit 0
    displayName: 'Get Environment'
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))

  - powershell: |
      tools/releaseBuild/vstsbuild.ps1 -ReleaseTag $(ReleaseTag) -Name win-$(Architecture)-symbols
    displayName: 'Build Windows Universal - $(Architecture) Symbols zip'
    continueOnError: true
    condition: and(succeeded(), ne(variables['SkipFxDependent'], 'true'))
