jobs:
- job: sign_linux_builds
  displayName: Sign all linux builds
  condition: succeeded()
  pool:
    name: PowerShell1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  dependsOn: ['build_fxdependent', 'build_rpm']
  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - group: ESRP

  steps:
  - checkout: self
    clean: true

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuild.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuild.tar.gz
    displayName: Download deb build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuildMinSize.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuildMinSize.tar.gz
    displayName: Download min-size build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuildArm32.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm32.tar.gz
    displayName: Download arm32 build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuildArm64.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm64.tar.gz
    displayName: Download arm64 build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshMarinerBuildAmd64.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshMarinerBuildAmd64.tar.gz
    displayName: Download mariner build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuildAlpine.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuildAlpine.tar.gz
    displayName: Download alpine build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: pwshLinuxBuildFxdependent.tar.gz
      path: $(Build.ArtifactStagingDirectory)/pwshLinuxBuildFxdependent.tar.gz
    displayName: Download fxdependent build

  - pwsh: |
      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuild.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuild"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuild.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuild

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuildMinSize.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuildMinSize"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuildMinSize.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuildMinSize

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm32.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm32"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm32.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm32

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm64.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm64"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm64.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuildArm64

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshMarinerBuildAmd64.tar.gz to $(Build.ArtifactStagingDirectory)/pwshMarinerBuildAmd64"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshMarinerBuildAmd64.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshMarinerBuildAmd64

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuildAlpine.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuildAlpine"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuildAlpine.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuildAlpine

      Write-Verbose -Verbose -Message "Expanding $(Build.ArtifactStagingDirectory)/pwshLinuxBuildFxdependent.tar.gz to $(Build.ArtifactStagingDirectory)/pwshLinuxBuildFxdependent"
      tar -xf $(Build.ArtifactStagingDirectory)/pwshLinuxBuildFxdependent.tar.gz -C $(Build.ArtifactStagingDirectory)/pwshLinuxBuildFxdependent
    displayName: Expand builds

  - template: SetVersionVariables.yml
    parameters:
      ReleaseTagVar: $(ReleaseTagVar)

  - template: cloneToOfficialPath.yml

  - template: insert-nuget-config-azfeed.yml
    parameters:
      repoRoot: $(PowerShellRoot)

  - pwsh: |
      Set-Location $env:POWERSHELLROOT
      import-module "$env:POWERSHELLROOT/build.psm1"
      Sync-PSTags -AddRemoteIfMissing
    displayName: SyncTags
    condition: and(succeeded(), ne(variables['SkipBuild'], 'true'))

  - checkout: ComplianceRepo
    clean: true

  - template: shouldSign.yml

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuild
      buildPrefixName: 'PowerShell Linux'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuildMinSize
      buildPrefixName: 'PowerShell Linux Minimum Size'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuildArm32
      buildPrefixName: 'PowerShell Linux Arm32'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuildArm64
      buildPrefixName: 'PowerShell Linux Arm64'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshMarinerBuildAmd64
      buildPrefixName: 'PowerShell Linux x64 Framework Dependent'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuildAlpine
      buildPrefixName: 'PowerShell Linux Alpine x64'

  - template: signBuildFiles.yml
    parameters:
      binLocation: pwshLinuxBuildFxdependent
      buildPrefixName: 'PowerShell Linux Framework Dependent'
